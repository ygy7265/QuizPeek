[
  {
    "question": "1. 자료 흐름도(DFD)의 구성 요소가 아닌 것은?",
    "choices": ["프로세스", "자료 저장소", "자료 흐름", "클래스"],
    "answer": "클래스"
  },
  {
    "question": "2. 자료 흐름도에서 자료 저장소(Data Store)를 나타내는 기호는?",
    "choices": ["원", "화살표", "이중 직선 또는 열린 사각형", "사각형"],
    "answer": "이중 직선 또는 열린 사각형"
  },
  {
    "question": "3. 다음 중 자료 흐름도에서 외부 개체(External Entity)를 나타내는 기호는?",
    "choices": ["원", "사각형", "이중 직선", "삼각형"],
    "answer": "사각형"
  },
  {
    "question": "4. DFD에서 프로세스를 나타내는 일반적인 기호는?",
    "choices": ["원", "사각형", "이중 직선", "화살표"],
    "answer": "원"
  },
  {
    "question": "5. 다음 중 자료 흐름도(DFD)의 주요 목적 중 하나는?",
    "choices": ["데이터베이스 설계", "시스템의 자료 이동과 처리 과정을 시각화", "네트워크 트래픽 분석", "소스 코드 최적화"],
    "answer": "시스템의 자료 이동과 처리 과정을 시각화"
  },
  {
    "question": "6. 자료 흐름도에서 사용하는 데이터 흐름은 무엇으로 표현되는가?",
    "choices": ["사각형", "원", "화살표", "이중선"],
    "answer": "화살표"
  },
  {
    "question": "7. 자료 흐름도에서 하나의 프로세스는 반드시 어떤 특성을 가져야 하는가?",
    "choices": ["데이터 저장소가 반드시 있어야 한다", "입력 없이 출력을 가질 수 있다", "입력과 출력이 있어야 한다", "외부 개체만 연결할 수 있다"],
    "answer": "입력과 출력이 있어야 한다"
  },
  {
    "question": "8. DFD 작성 시 고려해야 할 사항으로 가장 적절한 것은?",
    "choices": ["하나의 프로세스에 여러 데이터 저장소 연결 금지", "프로세스 명칭은 명사로 시작", "자료 흐름은 항상 양방향", "자료 흐름과 프로세스 간 관계 명확히 해야 함"],
    "answer": "자료 흐름과 프로세스 간 관계 명확히 해야 함"
  },
  {
    "question": "9. DFD는 주로 어떤 설계 단계에서 사용되는가?",
    "choices": ["요구사항 분석", "논리 설계", "물리 설계", "구현"],
    "answer": "요구사항 분석"
  },
  {
    "question": "10. 다음 중 잘못된 자료 흐름도 작성 예는?",
    "choices": ["외부 개체끼리 직접 연결됨", "프로세스와 자료 저장소 간 화살표로 연결", "자료 흐름이 한 방향으로 흐름", "프로세스는 명사+동사로 구성"],
    "answer": "외부 개체끼리 직접 연결됨"
  },
  {
    "question": "XP의 주요 목표 중 하나는 무엇인가요?",
    "answer": "C) 고객의 요구 사항을 빠르게 반영하는 것",
    "choices": [
      "A) 높은 코드 품질을 보장하는 것",
      "B) 팀 내 외부 간섭을 최소화하는 것",
      "C) 고객의 요구 사항을 빠르게 반영하는 것",
      "D) 프로젝트를 빠르게 종료하는 것"
    ]
  },
  {
    "question": "XP에서 'Pair Programming'의 주요 목적은 무엇인가요?",
    "answer": "B) 두 명의 개발자가 한 컴퓨터에서 코드를 작성하는 것",
    "choices": [
      "A) 한 명의 개발자가 코드를 작성하고, 다른 개발자는 코드를 리뷰하는 것",
      "B) 두 명의 개발자가 한 컴퓨터에서 코드를 작성하는 것",
      "C) 코드 리뷰를 자동화하는 것",
      "D) 코드 작성 후 자동으로 테스트를 실행하는 것"
    ]
  },
  {
    "question": "XP에서 'Test-Driven Development (TDD)'의 주요 특징은 무엇인가요?",
    "answer": "A) 테스트가 먼저 작성되고 그 후에 코드가 작성되는 것",
    "choices": [
      "A) 테스트가 먼저 작성되고 그 후에 코드가 작성되는 것",
      "B) 코드가 먼저 작성되고 그 후에 테스트가 작성되는 것",
      "C) 테스트는 작성하지 않고 코드만 작성하는 것",
      "D) 기능을 먼저 작성하고, 그 후에 테스트가 작성되는 것"
    ]
  },
  {
    "question": "XP에서 'Continuous Integration'이란 무엇을 의미하나요?",
    "answer": "B) 코드 변경 사항을 주기적으로 메인 브랜치에 통합하는 것",
    "choices": [
      "A) 개발자들이 각자의 기능을 독립적으로 배포하는 것",
      "B) 코드 변경 사항을 주기적으로 메인 브랜치에 통합하는 것",
      "C) 테스트를 자동화하는 것",
      "D) 개발 중인 모든 코드를 즉시 사용자에게 배포하는 것"
    ]
  },
  {
    "question": "XP에서 'Customer Collaboration'의 중요성은 무엇인가요?",
    "answer": "B) 고객의 피드백을 즉시 반영하여 프로젝트 진행을 조정하는 것",
    "choices": [
      "A) 고객이 직접 코드를 작성하는 것",
      "B) 고객의 피드백을 즉시 반영하여 프로젝트 진행을 조정하는 것",
      "C) 고객과 개발자가 함께 서버를 관리하는 것",
      "D) 고객이 특정 기능을 완성하는 것을 돕는 것"
    ]
  }, {
  "question": "XP의 주요 목표 중 하나는 무엇인가요?",
  "answer": "C) 고객의 요구 사항을 빠르게 반영하는 것",
  "choices": [
    "A) 높은 코드 품질을 보장하는 것",
    "B) 팀 내 외부 간섭을 최소화하는 것",
    "C) 고객의 요구 사항을 빠르게 반영하는 것",
    "D) 프로젝트를 빠르게 종료하는 것"
  ]
},
  {
    "question": "XP에서 'Pair Programming'의 주요 목적은 무엇인가요?",
    "answer": "B) 두 명의 개발자가 한 컴퓨터에서 코드를 작성하는 것",
    "choices": [
      "A) 한 명의 개발자가 코드를 작성하고, 다른 개발자는 코드를 리뷰하는 것",
      "B) 두 명의 개발자가 한 컴퓨터에서 코드를 작성하는 것",
      "C) 코드 리뷰를 자동화하는 것",
      "D) 코드 작성 후 자동으로 테스트를 실행하는 것"
    ]
  },
  {
    "question": "XP에서 'Test-Driven Development (TDD)'의 주요 특징은 무엇인가요?",
    "answer": "A) 테스트가 먼저 작성되고 그 후에 코드가 작성되는 것",
    "choices": [
      "A) 테스트가 먼저 작성되고 그 후에 코드가 작성되는 것",
      "B) 코드가 먼저 작성되고 그 후에 테스트가 작성되는 것",
      "C) 테스트는 작성하지 않고 코드만 작성하는 것",
      "D) 기능을 먼저 작성하고, 그 후에 테스트가 작성되는 것"
    ]
  },
  {
    "question": "XP에서 'Continuous Integration'이란 무엇을 의미하나요?",
    "answer": "B) 코드 변경 사항을 주기적으로 메인 브랜치에 통합하는 것",
    "choices": [
      "A) 개발자들이 각자의 기능을 독립적으로 배포하는 것",
      "B) 코드 변경 사항을 주기적으로 메인 브랜치에 통합하는 것",
      "C) 테스트를 자동화하는 것",
      "D) 개발 중인 모든 코드를 즉시 사용자에게 배포하는 것"
    ]
  },
  {
    "question": "XP에서 'Customer Collaboration'의 중요성은 무엇인가요?",
    "answer": "B) 고객의 피드백을 즉시 반영하여 프로젝트 진행을 조정하는 것",
    "choices": [
      "A) 고객이 직접 코드를 작성하는 것",
      "B) 고객의 피드백을 즉시 반영하여 프로젝트 진행을 조정하는 것",
      "C) 고객과 개발자가 함께 서버를 관리하는 것",
      "D) 고객이 특정 기능을 완성하는 것을 돕는 것"
    ]
  },
  {
    "question": "객체지향 개념에서 연관된 데이터와 함수를 함께 묶어 외부와 경계를 만들고 필요한 인터페이스만을 밖으로 드러내는 과정은?",
    "answer": "2. 캡슐화",
    "choices": [
      "1. 메시지",
      "2. 캡슐화",
      "3. 다형성",
      "4. 상속"
    ]
  },
  {
    "question": "객체지향 개념에서 객체 간에 정보를 주고받기 위해 사용되는 수단은?",
    "answer": "1. 메시지",
    "choices": [
      "1. 메시지",
      "2. 캡슐화",
      "3. 다형성",
      "4. 상속"
    ]
  },
  {
    "question": "객체지향 개념에서 동일한 이름의 메서드가 다른 클래스에서 다른 방식으로 동작하도록 하는 개념은?",
    "answer": "3. 다형성",
    "choices": [
      "1. 메시지",
      "2. 캡슐화",
      "3. 다형성",
      "4. 상속"
    ]
  },
  {
    "question": "객체지향 개념에서 하위 클래스가 상위 클래스의 속성과 기능을 물려받는 특징은?",
    "answer": "4. 상속",
    "choices": [
      "1. 메시지",
      "2. 캡슐화",
      "3. 다형성",
      "4. 상속"
    ]
  }
]
