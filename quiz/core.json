[
  {
    "question": "모든 구문을 한번 이상 수행하는 테스트 커버리지",
    "answer": "구문(Statement) 커버리지"
  },
  {
    "question": "결정문의 결과가 참과 거짓의 결과를 수행하는 테스트 커버리지",
    "answer": "결정(Decision) 커버리지"
  },
  {
    "question": "결정문의 결과와 결정문 내부 개별 조건식의 결과가 참과 거짓의 결과를 수행하는 테스트 커버리지",
    "answer": "조건/결정 커버리지"
  },
  {
    "question": "결정문 내부 개별 조건식 결과에 상관없이 독립적으로 전체 조건식의 결과에 영향을 주는 테스트 커버리지 (가장안전한 커버리지)",
    "answer": "변형 조건/결정 커버리지(MC/DC)"
  },
  {
    "question": "전체 조건식의 참과 거짓 결과에 상관없이 결정 포인트 내에 있는 모든 개별 조건식이 참 한번, 거짓 한번을 모두 갖도록 조합하는 커버리지",
    "answer": "다중 조건 커버리지"
  },
  {
    "question": "상위 클래스에서는 객체를 생성하기 위한 인터페이스를 정의하고 하위클래스는 어떤 클래스의 인스턴스를 생성할 것인지 결정하는 패턴",
    "answer": "Factory Method"
  },
  {
    "question": "관련이 있는 서브 클래스를 묶어서 조건에 따라 객체를 생성하는 패턴 상세화된 서브클래스를 정의하지 않고도 서로 관련성이 있거나 독립적인 여러 객체의 군을 생성하기 위한 인터페이스를 제공",
    "answer": "Abstract Factory"
  },
  {
    "question": "복잡한 객체를 단계적으로 생성하는패턴,\n 복잡한 객체 생성과정을 분리(캡슐화) 하여 동일한 절차에서도 서로 다른 객체를 생성 하는 패턴",
    "answer": "Builder"
  },
  {
    "question": "동일한 타입의 객체를 생성할때 필요한 비용을 줄이기 위한 패턴,\n 새로운 객체를 생성하는 것이 안니 기존의 객체를 복사하여 특정 속상값 변경",
    "answer": "Prototype"
  },
  {
    "question": "클래스가 오직 하나의 인스턴스만을 가지도록 하는 패턴",
    "answer": "Singleton"
  },
  {
    "question": "서로 다른 인터페이스를 가진 클래스를 함께 사용할 수 있는 패턴,\n 클래스의 인터페이스를 다른 인터페이스로 변환하여 함께 작동 해주도록 함",
    "answer": "Adapter"
  },
  {
    "question": "(느슨한 결합 유지 도움) 복잡하게 설계된 클래스를 기능부와 구현부로 분리한 뒤, 두클래스를 연결하는 패턴",
    "answer": "Bridge"
  },
  {
    "question": "객체들의 관계를 트리 구조로 구성화 하여 단일객체와 복합 객체를 동일하게 다루는 패턴\n 다수의 클래스를 하나의 클래스로 취급가능",
    "answer": "Composite"
  },
  {
    "question": "클래스 변경없이 주어진 상황에 따라 추가하는 패턴\n 기존 클래스의 메소드에 새로운 기능 추가 및 확장 가능",
    "answer": "Decorater"
  },
  {
    "question": "복잡한 서브 시스템을 간편하게 사용할 수 있도록 단순화 된 인터페이스를 제공,\n 다수의 하위 클래스들이 올바른 결합도를 갖도록 하여 의존 관계를 줄이고 복잡성을 낮출수 있는 패턴",
    "answer": "Facade"
  },
  {
    "question": "메모리 사용량을 최소화 하기 위해 객체간 데이터공유를 극대화하는 패턴 \n사용빈도가 높을 것으로 예상되는 데이터를 중복생성 하지 않고 외부 자료 구조에 저장하여 활용하는 패턴",
    "answer": "Flyweight"
  },
  {
    "question": "특정 객체로의 접근을 해당객체의 대리자를 통해 진행하는 패턴",
    "answer": "Proxy"
  },
  {
    "question": "언어의 문법을 평가하는 방법을 규정하는 패턴",
    "answer": "Interpreter"
  },
  {
    "question": "상위 클래스에서 알고리즘의 뼈대를 정의하고 구체적인 단계는 하위 클래스에서 정의하는 패턴\n 알고리즘의 구조(고정적 기능)를 변경하지 않고 알고리즘의 특정 단계들을 재정의할 수 있다.",
    "answer": "Tepmlate Method"
  },
  {
    "question": "문제의 해결을 위한 일련의 처리 객체가 순서대로 문제를 해결하는 패턴\n 각각 처리객체는 문제의 일정 부분을 처리할 수 있는 연산의 집합이고, 처리 객체에 의해 일부분이 해결된 문제는 다음 처리 객체로 넘겨져 계속 처리 된다.",
    "answer": "Chain of Responsibility"
  },
  {
    "question": "요정을 객체의 형태로 캡슐화 하여 나중이 이용할 수 있도록 요청에 필요한 정보를 저장하는 패턴\n 메소드 이름, 매개변수 등의 정보를 저장하여 복구,최소 등이 가능하다.",
    "answer": "Command"
  },
  {
    "question": "내부 구현을 노출시키지 않고 집약된(집합) 객체에 접근하고 싶을때 적용하는 패턴",
    "answer": "Iterator"
  },
  {
    "question": "(느슨한 결합 유지 도움) 객체 간의 통신이 직접 이루어 지지 않고 중재자를 통해 결합도를 감소 시키는 패턴",
    "answer": "Mediator"
  },
  {
    "question": "롤백을 통해 객체의 상태를 이전 상태로 되돌릴 수 있는 기능을 제공하는 패턴\n 객체의 캡슐화가 유지되는 상태에서 객체 내부 상태를 외부에 저장하여 복구가 가능하도록 한다.",
    "answer": "Memento"
  },
  {
    "question": "객체의 상태변화를 관찰하는 ? 등록하여 상태 변화가 있을때 마다 등록된 ? 통지하는 패턴",
    "answer": "Observer"
  },
  {
    "question": "객체의 내부 상태에 따라 다른 기능을 수행하는 패턴 \n 객체의 상태에 따라 동일한 루틴에서도 다른 행동을 할 수 있다.",
    "answer": "State"
  },
  {
    "question": "문제를 해결하는 데 있어 다양한 알고리즘이 적용할수 있는 경우에 알고리즘을 별도로 분리(캡슐화) 하는 패턴\n 특정 객체에 종속 되지않으며 알고리즘에 확장가 변경에 용이함.",
    "answer": "Strategy"
  },
  {
    "question": "알고리즘을 자료 구조에서 분리하여 클래스를 수정하지 않고도 새로운 알고리즘을 추가할 수 있도록 하는 패턴",
    "answer": "Visitor"
  },
  {
    "question": "패킷의 전송 순서는 바뀌지않고 체증이 비교적 많이 발생하며, 논리적 연결 설정 작업을 한뒤 패킷 교환 방식은 ?",
    "answer": "가상 회선 패킷 교환 방식"
  },
  {
    "question": "논리적 경로의 확보 없이 자유롭게 데이터 패킷 전송하는 방식, 패킷의 전송 순서는 바뀔수 있고 체증이 덜 발생함.",
    "answer": "데이터 그램 패킷 교환 방식"
  },
  {
    "question": "IBM, 암호화 기법, 블록 64비트, 키 56비트, 16라운드 알고리즘 ?",
    "answer": "DES"
  },
  {
    "question": "키의 길이에 따라 10/12/14 라운드를 진행하고,128bit의 블록크기와 가변 길이 키(128,192,256) 을 가지고,DES를 대체하는 미국의 표준 대칭키 암호화 알고리즘은?",
    "answer": "AES"
  },
  {
    "question": "64bit의 블록크기를 가지고 키길이는 128bit 8라운드 진행하고, DES 를 대체하기 위해 스위스에서 개발된 알고리즘은 ?",
    "answer": "IDEA"
  },
  {
    "question": "128bit 블록 크기와 128bit의 키길이를 가지며 16라운드 진행하고 ARIA 이전 국내 표준 알고리즘은 ?",
    "answer": "SEED"
  },
  {
    "question": "AES 알고리즘이 개선된 것 으로 128bit의 블록크기, 키길이(128,192,256)에 따라 라운드 (12,14,16)을 진행하고 국내 공공기관에서 사용하는 알고리즘은 ?",
    "answer": "ARIA"
  },
  {
    "question": "다양한 크기의 키 블록, 라운드를 가질 수 있는 블록 암호화 알고리즘, 단순하고 빠르며 메모리 요규량이 낮은편,",
    "answer": "RC5"
  },
  {
    "question": "유선 LAN 에서 기대할수 있는 수준의 무선 LAN 보안 프로토콜",
    "answer": "WEP(Wired Equivalent Privacy)"
  },
  {
    "question": "IEEE 802.11 무선랜 보안에 사용된 웹방식을 보완한 데이터 보안 프로토콜\n ( 1 ) 기반의 무선랜 보안 표준을 ( 2 ) 라고 한다",
    "answer": "1. TKIP(Temporal Key Integrity Protocol) 2. WPA(Wi-fi Protected Access)"
  },
  {
    "question": "SSL 공동인증서 등에 활용하고있는, 큰 합성수의 소인수 분해가 어렵다는 점을 이용한 알고리즘으로 키의 길이가 길고 속도가 느린편인 암호화는 ?",
    "answer": "RSA(Rivest Shamir Adleman)"
  },
  {
    "question": "RSA의 대안으로 대두된 이산대수의 난해성에 기반한 공개키 암호화 알고리즘, 비트코인 등에서 사용 RSA 보다 수십 배 빠름",
    "answer": "ECC(elliptic Curve Crypto)"
  },
  {
    "question": "미국 NIST에서 전자서명 표준에서 사용하기 위해 정부용 공개키 알고리즘 EIGammal 알고리즘을 기반으로 만들어짐",
    "answer": "DSA"
  },
  {
    "question": "암호화 알고리즘이 아닌 데이터 무결성을 점검하기 위한 해시 알고 리즘으로 128 해시값을 가진다.",
    "answer": "MD5(Message Digest 5)"
  },
  {
    "question": "MD 를 대체하기 위해 미국 NIST 에서 개발한 해시 암호화 알고리즘",
    "answer": "SHA(Secure Hash Algorithm)"
  },
  {
    "question": "모듈과 모듈 간의 관련성이 얼마나 깊은지 나타내는 정도",
    "answer": "결합도"
  },
  {
    "question": "결합도 의 낮은 순서 부터 높은 순서 까지 나열하시오.",
    "answer": "자료 -> 스탬프 -> 제어 -> 외부 -> 공통 -> 내용"
  },
  {
    "question": "모듈 간의 인터페이스로 전달되는 (1 )와 (2) 를 통해서만 상호 작용이 일어나는 결합도는 ?",
    "answer": "1. 인수 2. 매개변수 3. 자료(Data) 결합도"
  },
  {
    "question": "관련 있는 모듈들이 동일한 자료구조를 공유하는 결합도,\n 특정 모듈에서 자료구조를 변화 시켰다면, 관련있는 다른 모듈이 그영향을 미친다.",
    "answer": "스탬프(Stamp) 결합도"
  },
  {
    "question": "전달 대상 모듈에게 값만 전달하는 것이 아니라 제어 요소를 함께 전달하는 결합도는 ?\n전달되는 제어 요소에 따라 대상 모듈의 처리절차가 달라진다.",
    "answer": "제어(Control) 결합도"
  },
  {
    "question": "인수의 전달 없이 특정 모듈이 다른 모듈의 내부 데이터를 참조하는 경우의 결합도는 ?",
    "answer": "외부(External) 결합도"
  },
  {
    "question": "모듈이 다른 모듈의 내부기능과 데이터를 직접적으로 사용하는경우의 결합도는 ?",
    "answer": "내용 (Content)결합도"
  },
  {
    "question": "모듈의 내부 요소들의 관계가 얼마나 밀접한지를 나타내는 정도는?",
    "answer": "모듈 응집도(Cohesion)"
  },
  {
    "question": "응집도가 낮은것부터 높은거까지 나열하시오.",
    "answer": "우연적 -> 논리적 -> 시간적 -> 절차적 -> 통신적 -> 순차적 -> 기능적"
  },
  {
    "question": "모든 기능 요소들이 하나의 문제를 해결하기 위해 수행되는 경우,\n모듈은 계층적으로 구성",
    "answer": "기능적(Functional) 응집도"
  },
  {
    "question": "모듈의 기능 수행으로 인한 출력 결과를 다른 모듈의 입력 값으로 사용하는 경우의 응집도",
    "answer": "순차적(Sequential) 응집도"
  },
  {
    "question": "동일한 입력을 기반으로 수행된 기능의 출력 결과를 이욜하여 서로 다른 기능을 수행하는경우의 응집도",
    "answer": "통신적(Communication)응집도"
  },
  {
    "question": "하나의 문제를 해결하기 위해 여러 모듈들이 순차적으로 수행되는경우의 응집도",
    "answer": "절차적(Procedural)응집도"
  },
  {
    "question": "각 기능들의 연관성은 없지만 특정시기에 함께 수행되어야하는 경우의 응집도",
    "answer": "시간적(Temporal) 응집도"
  },
  {
    "question": "유사한 성격이나 형태를 가진 기능을 하나의 모듈에서 수행되도록 하는 경우의 응집도",
    "answer": "논리적(Logical) 응집도"
  },
  {
    "question": "모듈내부의 구성 요소들이 서로 아무런 관련이 없는 견우의 응집도",
    "answer": "우연적(Coincidental) 응집도"
  },
  {
    "question": "규정된 크기 이상의 ( 1 ) 패킷을 전송하여 Dos를 유발 시키거나 과부화로 인한 Crashing, 리부팅 등을 유발하는 공격방법은?",
    "answer": "1.ICMP 2. 죽음의 핑(Ping of Death)"
  },
  {
    "question": "TCP의 3-Way-Handshake 취약점을 이용한 공격으로 다량의 SYN 패킷을 보내 백로그 큐를 가득 채워 다른 연결을 받아 들이지 못하게하는 공격 방식은?",
    "answer": "SYN Flooding"
  },
  {
    "question": "(1 ) 프로토콜의 취약점을 이용한 공격으로 여러 호스트가 특정 대상에서 (1) Ehco Reply 를 보내게 하여 서비스 거부(Dos) 를 유발시키는 보안 공격은 ?",
    "answer": "Smurf"
  },
  {
    "question": "분산된 다수의 좀시 PC(악성 Bot)를 이용하여 공격 대상 시스템를 마비시키는 공격 방식은 ?",
    "answer": "DDos(Distributed Denial Of Service)"
  },
  {
    "question": "공격자가 패킷의 출발지 주소나 포트를 임의로 변경하여 출발지와 목적지 주소를 동일하게 함으로써 공격 대상 컴퓨터의 실행속도를 느리게하거나 동작을 마비시켜 서비스 거부 상태에 빠지도록 하는 공격방법은 ?",
    "answer": "LAND(Local Area Network Denial Attack)"
  },
  {
    "question": "정상적인 파일로 가장해 컴퓨터 내부에 숨어 있다가 특정 포트를 열어 공격자의 침일을 도와 정보를 유출시킨다\n자체 감염 기능은 존재하지않는다.",
    "answer": "트로이목마(Trojan Horse)"
  },
  {
    "question": "사용자 동의 없이 설치 되어 컴퓨터의 정보를 수집하는 소프트웨어는?",
    "answer": "스파이웨어(SpyWare)"
  },
  {
    "question": "바이러스 처럼 다른 파일에 기생하지않고 독립적으로 자신을 복제하여 확산한다.",
    "answer": "웜(Worm)"
  },
  {
    "question": "정상적인 파일에 기상하여 존재하며 자신을 끊임없이 복제한다.",
    "answer": "바이러스"
  },
  {
    "question": "키보드 입력을 모두 기로갛여 그안에 중요 정보를 탈취하는 도구",
    "answer": "키로거(Key Logger)"
  },
  {
    "question": "인터넷 사용자의 컴퓨터에 침임하여 내부 문서 및 파일을 암호화한 뒤에 암호 해독용 프로그램을 제공하는 조건으로 사용자에게 돈을 요구하는 공격 방식",
    "answer": "랜섬웨어(Ransomware)"
  },
  {
    "question": "네트워크 상의 컴퓨터와 가동 서비스를 탐색하여 장비 구성, 포트 구성등을 파악하는 보안공격방식?",
    "answer": "스캐닝(Scanning)"
  },
  {
    "question": "네트워크상에 전송되는 트래픽을 훔쳐보는 행위",
    "answer": "스니핑(Sniffing)"
  },
  {
    "question": "스니핑과 유사한 용어로 네트워크상에 떠도는 중요 정보를 몰래 획득하는 행위",
    "answer": "스누핑(Snooping)"
  },
  {
    "question": "가장 단순한 암호해독 방법으로 패스워드를 차직위해 가능성이 있는 모든 값을 전부 대입해보는 공격은?",
    "answer": "무차별 대입 공격(Brute Force Attack)"
  },
  {
    "question": "암호가 걸려있는 정품 소프트웨어의 암호화를 풀어 불법적으로 무제한으로 사용할수있게하는것은?",
    "answer": "크랙(Crack)"
  },
  {
    "question": "블루투스의 취약점을 이용하여 목표장비의 임의 파일에 접근하는 공격방법은?",
    "answer": "블루스나핑(Blue Snarfing)"
  },
  {
    "question": "블루투스 장비간의 취약한 연결 관리를 악용한 공격으로 공격 장치와 공격 대상 장치에서 임의의 동작(전화,SMS) 을 실행하는 공격 방법",
    "answer": "블루버깅(Blue Bugging)"
  },
  {
    "question": "블루투스를 이용해 스팸처럼 명함 등을 익명으로 전송하는 공격 방법",
    "answer": "블루재킹(Blue Jacking)"
  },
  {
    "question": "통신을 연결하는 두사람 사이에 중간자가 침입 한 후, 네트워크 통신을 조작하여 통신 내용ㅇ을 도청하거나 조작하는 공격기법?",
    "answer": "중간자 공격(Man In The Middle)"
  },
  {
    "question": "중간자 공격등으로 유출된 암호나 토큰 등을 재전송함으로써 승인된 사용자가 오인하게 만들어 공격하는 기법?",
    "answer": "재전송 공격(Replay Attack)"
  },
  {
    "question": "SQL을 주입하여 의도하지않은 명령어를 수행하는 공격기법",
    "answer": "SQL Injection"
  },
  {
    "question": "웹 페이지에 악의적입 스크립트를 포함시켜 사용자측에서 실행되게끔 유도하는 공격",
    "answer": "XSS(Cross-Site-Scripting)"
  },
  {
    "question": "특정 취약점에 대한 보안 패치나 대응법이 발표되기 전에 해당 취약점을 이용하여 위협을 가하는 공격 방법",
    "answer": "제로데이 공격(Zero Day Attack)"
  },
  {
    "question": "백도어,트로이목마설치,원격접근,내부 사용 흔적 삭제, 관리자 권한 획득 등 주로 불법적인 해킹에 사용되는 기능들을 제공하는 프로그램의 모음?",
    "answer": "RootKit"
  },
  {
    "question": "해커가 이용자몰래 컴퓨터에 접속하여 악의적인 행위를 하기 위해 설치해 놓은 출입통로 역할을 하는 악성코드?",
    "answer": "백도아(BackDoor)"
  },
  {
    "question": "원본 데이터에 대한 해쉬값을 미리 계산하여 사전 형태(레인보우 테이블)로 만들어놓고 하나하나 대입해보는 공격 방법",
    "answer": "사전공격(Dictionary Attack)"
  },
  {
    "question": "정당한 사용자가 수행한 세션 인증을 가로체어 중요자원에 접근하는공격 방법",
    "answer": "세션 하이재킹(Session Hijacking)"
  },
  {
    "question": "보안 공격을 위해 자신을 다른주체(권한 있는 주체)로 속이는 행위\n IP,MAC 주소 변경 등",
    "answer": "스푸핑(spoofing)"
  },
  {
    "question": "TCP/IP에서 신뢰성 없는 IP를 대신하여 송신측으로 네트워크의 IP 상태 및 에러 메시지를 전달해주는 프로토콜",
    "answer": "ICMP"
  },
  {
    "question": " 대표적인 내부 라우팅 프로토콜, 대규모 네트워크에 적합, 링크 상태 라우팅 프로토콜로도 불리는 라우팅 프로토콜은",
    "answer": "OSPF"
  },
  {
    "question": "심리학자 톰 마릴은 컴퓨터가 메시지를 전달하고, 메시지가 제대로 도착했는지 확인하며, 도착하지 않았을 경우 메시지가 재전송하는 일련의 방법을 가리켜 '기술적 은어'라는 뜻으로 (   )이라 불렀다.",
    "answer": "프로토콜"
  },
  {
    "question": "SQL-테이블에 속성 추가\n\n( ① ) TABLE 학생 ( ② ) 주소 VARCHAR(20);",
    "answer": "① ALTER ② ADD"
  },
  {
    "question": "동치 분할 테스트, 경계값 분석 테스트 등 내부 구조를 보지 않고 하는 테스트",
    "answer": "블랙박스 테스트"
  },
  {
    "question": "SQL-학생 테이블에서 이름이 민수인 튜플 삭제",
    "answer": "DELETE FROM 학생 WHERE 이름 = '민수'"
  },
  {
    "question": "비동기식 자바스크립트 XML",
    "answer": "AJAX"
  },
  {
    "question": "고객의 요구사항 변화에 유연하게 대응하기 위해 일정한 주기를 반복하면서 개발하는 방법론. 워터폴에 대비되는 방법론으로 최근 회사에서 각광받는 방법론 (시제품)",
    "answer": "애자일"
  },
  {
    "question": "망 계층(network layer, 3계층)인 인터넷 프로토콜(IP)에서 보안성을 제공해 주는 표준화된 기술",
    "answer": "IPSec"
  },
  {
    "question": "휴대 전화를 비롯한 휴대용 장치를 위한 운영 체제와 미들웨어, 사용자 인터페이스 그리고 표준 응용 프로그램(웹 브라우저, 이메일 클라이언트, 단문 메시지 서비스(SMS), MMS 등을 포함하고 있는 소프트웨어 스택이자 리눅스 모바일 운영 체제이다. 개발자들이 자바 와 코틀린 언어로 응용 프로그램을 작성할 수 있게 하였으며, 컴파일된 바이트코드를 구동할 수 있는 런타임 라이브러리를 제공한다.",
    "answer": "안드로이드"
  },
  {
    "question": "SQL 인덱스 작성 - student 테이블의 name 속성에 idx_name 이름의 인덱스 생성",
    "answer": "CREATE INDEX idx_name ON student(name);"
  },
  {
    "question": " 웹 서비스(Web Service) 방식에서 파일 전송은 HTTP 기반의 (   1  )을 사용하여 송수신한다. (  1  ) 대신 (2) 프로토콜(Protocol)로 대체할 수 있다.",
    "answer": "1. SOAP, 2. RestApi"
  },
  {
    "question": " 전세계 오픈된 정보를 하나로 묶는 방식.",
    "answer": " Linked Open Data"
  },
  {
    "question": "물리주소(MAC 주소)로 IP주소를 찾는 프로토콜",
    "answer": "RARP"
  },
  {
    "question": " (1) 결과로 테이블 정의서, 명세서 등이 있음\n\n(2) 결과로 E-R 다이어그램\n\n(3) 과정에서 정규화 과정 수행",
    "answer": "물리,개념,논리"
  },
  {
    "question": "웹 서비스명, 제공 위치, 메시지 포맷, 프로토콜 정보 등 웹 서비스에 대한 상세 정보가 기술된 XML 형식으로 구현되어 있는 언어는 무엇인가? ",
    "answer": "WSDL"
  },
  {
    "question": "블랙박스 테스트\n\n0 <= x <= 10 일 때 -1 0 10 11인경우\n유효값과 그렇지않은 범위 나눠야할 경우",
    "answer": "경계값 분석, 동치(동등) 분할"
  },
  {
    "question": "서로 다른 플랫폼 간의 연계, 통합, Point to Point, Hub&Spoke, Message Bus 등이 있음",
    "answer": "EAI"
  },
  {
    "question": "프로세스간 인터페이스, 세마포어, 공유 메모리, 소켓",
    "answer": "IPC(Inter-Process Communication)"
  },
  {
    "question": "시스템 객체의 접근을 개인 또는 그룹의 식별자에 기반한 방법, 어떤 종류의 접근 권한을 가진 사용자가 다른사용자에 자신의 판단에 따라 권한을 허용하는 접근제어 방식은?",
    "answer": "DAC(임의적 접근통제)"
  },
  {
    "question": "데이터베이스 이상 3가지",
    "answer": "갱신 이상, 삽입 이상, 삭제 이상  "
  },
  {
    "question": "분산 환경에서 빅 데이터를 저장하고, 처리할 수 있는 자바 기반의 오픈 소스 프레임 워크이며, 더그 커팅과 마이크 캐퍼렐라가 개발했다. 구글 맵 리듀스를 대체한다.",
    "answer": "하둡"
  },
  {
    "question": "1960년대 말에 미국 AT&T 벨(Bell) 연구소에서 개발한 운영체제",
    "answer": "유닉스"
  },
  {
    "question": "퓨터 네트워킹에서 쓰이는 용어로서, IP 패킷의 TCP/UDP 포트 숫자와 소스 및 목적지의 IP 주소 등을 재기록하면서 라우터를 통해 네트워크 트래픽을 주고 받는 기술로써 네트워크 주소 변환이라고 함",
    "answer": "NAT"
  },
  {
    "question": "트랜잭션 수행 도중 데이터를 변경하면 변경 정보를 로그 파일에 저장하고, 트랜잭션이 부분 완료되기 전이라도 모든 변경 내용을 즉시 데이터베이스에 반영하는 기법. 회복 시 로그 파일을 참조하여 Redo와 Undo 연산을 모두 실행",
    "answer": "즉시갱신"
  },
  {
    "question": "온라인 금융 거래 정보를 블록으로 연결하여 피투피(P2P) 네트워크 분산 환경에서 중앙 관리 서버가 아닌 참여자(피어, peer)들의 개인 디지털 장비에 분산·저장시켜 공동으로 관리하는 방식",
    "answer": "블록체인"
  },
  {
    "question": "특정 몇몇 입력 값들에 대해서만 원하는 결과를 제공해 주는 오라클. 전 범위 테스트가 불가한 경우  사용. 경계값, 구간별 예상 값 결과 작성 사용",
    "answer": "샘플링 오라클"
  },
  {
    "question": " ~60 구간, 60~70 구간, 70~80 구간, 80~90 구간, 90~100 구간 표에서 각 구간마다 하나씩 테이스 데이터가 주어짐 (테스트 데이터: 55점 65점 78점 85점 95점...)",
    "answer": "동치 분할 테스트"
  },
  {
    "question": "네트워크 장치를 필요로하지 않는다, 네트워크 토폴로지가 동적으로 변화되는 특징, 응용 분야로는 긴급 구조, 긴급 회의, 전쟁터에서의 군사 네트워크",
    "answer": "애드훅 네트워크"
  },
  {
    "question": "(1) 사람의 감정이나 경험을 나타내는 개념\n   (2) 사용자 인터페이스 예)CLI",
    "answer": "UX,UI"
  },
  {
    "question": "튜플을 수정하는 SQL문\n\n[SQL문]\n\n(         ) 테이블명 (          ) 컬럼=값 WHERE 점수 >= 90;",
    "answer": "UPDATE, SET"
  },
  {
    "question": " JOIN\n\n[SQL문]\n\nSELECT ... FROM 학생정보 a JOIN 학과정보 b (        ) a.학과 = b.(         )",
    "answer": "ON, 학과"
  },
  {
    "question": "\n9. 화이트 박스 테스트 검증 기준(= 커버리지)\n\n(1) 모든 문장 수행\n\n(2) 조건 별로 True /False 일 때 수행\n\n(3) 전체 조건식 상관없이 개별 조건식의 True/False에 대해 수행",
    "answer": " (ㅂ)구문(문장), (ㄹ)결정(분기), (ㄷ)조건"
  },
  {
    "question": " 응집도\n\n(1) 입출력 간 연관성은 없으나, 순서에 따라 수행하는 것\n\n(2) 동일한 입출력 사용\n\n(3) 모든 기능들이 연관되어 있는것, 그룹화",
    "answer": "(ㄹ)절차적, (ㄷ)교환적, (ㄱ)기능적"
  },
  {
    "question": "디자인 패턴, (     ) 패턴은 반복적으로 사용되는 객체들의 상호작용을 패턴화한 것, 클래스나 객체들이 상호작용하는 방법, 알고리즘 등과 관련된 패턴  예) Interpreter, Observer, Command",
    "answer": "행위"
  },
  {
    "question": "병행 제어 기법, 접근한 데이터에 대한 연산을 모두 마칠때까지 상호배제 하는 것",
    "answer": "로킹"
  },
  {
    "question": " MAC 주소를 가로채는 공격",
    "answer": "ARP Spoofing"
  },
  {
    "question": "디자인 패턴 종류 중 (     ) 패턴은 상위 클래스에서 인터페이스만 정의하고 실제 생성은 서브 클래스가 담당한다.",
    "answer": "Factory Method"
  },
  {
    "question": "결합도(coupling) 종류 중 단순 처리할 대상인 값만 전달되는 게 아니라 어떻게 처리를 해야 한다는 제어 요소가 전달되는 경우이다",
    "answer": "Control"
  },
  {
    "question": "x, y = 100, 200\n\nprint(x==y)",
    "answer": "False"
  },
  {
    "question": "데이터 접근 방식. <값, 주소>자료구조, 파일 구조에는 ( 1 ), ( 2 ), ( 3 ) 이 있다.\n\n",
    "answer": "1. 순차, 2.인덱스, 3.해시"
  },
  {
    "question": " DB 회복 (부분 점수 있음)\n\n(1) 재실행, 장애 발생 전의 DB로 복구\n\n(2) 변경 연산 취소",
    "answer": "ㅇ.redo / ㅈ.undo"
  },
  {
    "question": " 정적 분석, 동적 분석 (부분 점수 있음)\n\n(1) 실행하지 않고 코드 분석\n\n(2) 프로그램 동작이나 반응을 추적하고 보고, 스냅샷 생성 및 비교, 모니터링",
    "answer": "ㄱ.static / ㅁ.dynamic"
  },
  {
    "question": "슈퍼키는 (1)의 속성을 갖는다. 후보키는 (1)과 (2)의 속성을 갖는다.",
    "answer": "ㅇ.유일성 / ㄹ.최소성"
  },
  {
    "question": "공격 대상이 피해 대상이 방문할 가능성이 있는 합법적인 웹 사이트를 감염시켜, 잠복하며 피해 대상이 접속할 때까지 기다린 후 접속 시 피해 대상의 컴퓨터에 악성 프로그램을 추가로 설치하는 방법",
    "answer": "watering hole"
  },
  {
    "question": "암호화 알고리즘\n\n(1) 라이, 메시, PES, IPES, 128비트 키, 64비트\n\n(2) NSA, Clipper Chip, 전화기",
    "answer": "① IDEA  ② Skipjack"
  },
  {
    "question": "공중망, 사설망, SSL (), IPsec()",
    "answer": "VPN"
  },
  {
    "question": "이미 테스트된 프로그램의 테스팅을 반복하는 것으로, 결함 수정 이후 변경의 결과로 새롭게 만들어 지거나, 이전 결함으로 인해 발견되지 않았던 또 다른 결함을 발견하는 테스트",
    "answer": "Regression"
  },
  {
    "question": "2. 관계대수 기호 - 합집합, 차집합, 카티션프로덕트, 프로젝트, 조인\n\n",
    "answer": "U, -, X, π, ⋈"
  },
  {
    "question": "형상 관리 도구 3가지\n\n- 보기: ㉠ OLAP  ㉡ CVS  ㉢ Ant ㉣ Maven  ㉤ Git ㉥ Jenkins ㉦ Spring  ㉧ SVN",
    "answer": "㉡ CVS, ㉤ Git ㉧ SVN"
  },
  {
    "question": "다양한 보안 장비와 서버, 네트워크 장비 등으로부터 보안 로그와 이벤트 정보를 수집한 후 정보들 간의 연관성을 분석하여 위협 상황을 인지하고, 침해사고에 신속하게 대응하는 보안 관제 설루션(solution).\n정보통신(IT)과 보안 환경이 복잡해지면서 보안 정보와 이벤트 관리( ) 설루션은 보안 인프라에서 필수 요소로 떠올랐다. 특히 기업은 테라바이트(terabyte) 급의 정형 · 비정형 데이터와 보안 로그 속에서 침입자 공격을 빠른 속도로 분석하고 예측해야 한다. 심(SIEM)은 방화벽, 안티바이러스 설루션, 서버, 네트워크 장비 등으로부터 수집한 다양한 로그와 보안 이벤트 데이터를 빅데이터 기반으로 분석한다. 보안 위협 징후를 판단할 수 있는 데이터(통계정보)를 생성하고 이 데이터로 보안 사고를 분석하고 예방 · 대응한다. 또한 로그 관리를 통합적으로 수행하며 네트워크 포렌식(forensic)과 보안 관련 준수성(compliance)에 중요한 역할을 담당한다.",
    "answer": "SIEM"
  },
  {
    "question": "① 프로세서(processor) 안에 독립적인 보안 구역을 따로 두어 중요한 정보를 보호하는 하드웨어 기반의 보안 기술로, 암(ARM: Advanced RISC Machine)사에서 개발하였다. 프로세서(processor) 안에 독립적인 보안 구역을 따로 두어 중요한 정보를 보호하는 하드웨어 기반의 보안 기술\n\n② 네티즌들이 사이트에 접속할 때 주소를 잘못 입력하거나 철자를 빠뜨리는 실수를 이용하기 위해 이와 유사한 유명 도메인을 미리 등록하는 일로, URL 하이재킹(hijacking)이라고도 한다. ",
    "answer": "① ㉠ Trust Zone  ② ㉡ 타이포스쿼팅"
  },
  {
    "question": "한 번의 인증 과정으로 여러 컴퓨터 상의 자원을 이용 가능하게 하는 인증 기능이다. \n\n",
    "answer": "SSO"
  },
  {
    "question": "최단작업우선, 선점형의 경우 최단잔여시간우선",
    "answer": "SJF"
  },
  {
    "question": "각 릴레이션은 참조할 수 없는 외래키 값을 가질 수 없다. [학생] 릴레이션에서 '교수번호' 속성에는 [교수] 릴레이션의 '교수번호' 속성에 없는 값은 입력할 수 없다.",
    "answer": "참조 무결성 제약 조건"
  },
  {
    "question": "거리 벡터 라우팅 프로토콜, 주기적으로 갱신, 홉(hop), 소규모",
    "answer": "RIP"
  },
  {
    "question": "데이터베이스 설계 순서",
    "answer": " ㉣ 요구사항분석 → ㉤ 개념적 설계 → ㉠ 논리적 설계 → ㉢ 물리적 설계 → ㉡ 구현"
  },
  {
    "question": "대칭키, 비대칭키 구분",
    "answer": "① 대칭키: des,aes,aria,seed  ② 비대칭키: ecc,rsa"
  },
  {
    "question": "소프트웨어의 위변조 방지 역공학 기술의 일종으로서, 디지털 콘텐츠의 관련 산업이나 전자상거래 또는 보호해야 할 소프트웨어가 있는 다양한 산업 분야에 적용된다.\n(템퍼 프루핑) 기술은 프로그램에 변조 검증 코드를 삽입하여 소프트웨어가 불법으로 변조된 것이 확인된 경우 해당 소프트웨어의 정상적 작동을 방해한다. 이때 변조 검증 코드의 용도는 변조되었는지를 탐지하고 변조가 탐지되었다면 프로그램이 실행되지 않게 하는 것이다.\n\n디지털 워터마킹은 디지털 콘텐츠에 삽입되어 저작권 확인 및 증명에 이용되기도 하고, 영상의 위변조 판별에도 이용된다. ( )은 소프트웨어의 위변조 판별에만 적용되는 것이 아니라, 이러한 영상의 위변조 판별, 모바일 단말기의 위변조 판별, 팩스 문서의 위변조 판별 등에도 적용되고 있다.",
    "answer": "템퍼프루핑"
  },
  {
    "question": "디자인 패턴\n① 객체를 하나만 생성하고 그 객체를 모든 곳에서 참조할 수 있도록 하는 패턴\n② 연산을 수행해야할 원소의 클래스를 수정하지 않고도 새로운 연산을 추가 가능하게 하는 패턴",
    "answer": "① 싱글톤(Singleton)  ② 비지터(Visitor)"
  },
  {
    "question": "비동기, Cell 크기가 53 Byte",
    "answer": "ATM"
  },
  {
    "question": "화이트 박스 테스트 나열\n (1) , (2), (2-1) : 반복 구조를 중심으로 테스트, (2-2) 변수의 정의와 사용을 중심으로 테스트, (2-3) 논리식(조건)을 중심으로 테스트",
    "answer": "1.기초경로(BasicPath) 2.제어구조검사, 2-1. 루프검사(Loop Testing), 2-2. 데이터 흐름 검사(Data Flow Testing), 2-3 조건 검사(Condition Testing)"
  },
  {
    "question": "블랙박스 테스트 기법 나열",
    "answer": "1.동등분할(Equivalence Partitioning),2.경계값 분석(Boundary Value), 3.원인-효과(Cause-Effect Graphing),4. 오류 예측(Error Guessing), 5.비교(Comparison)"
  },
  {
    "question": "입력 조건에 유효한 값과 무효한 값을 균등하게 하여 테스트 케이스설계하는 테스트 기법?",
    "answer": "동등분할(Equivalence Partitioning)"
  },
  {
    "question": "입력 조건의 경계에서 오류가 발생할 확률이 높다는 점을 이용하여 입력 조건의 경계값을 테스트 케이스로 설계하는 테스트 기법은 ?",
    "answer": "경계값 분석(Boundary Value)"
  },
  {
    "question": "입력 데이터간의 관계와 출력에 미치는 영향을 분석하여 효용성이 높은 테스트 케이스기법?",
    "answer": "원인-효과그래프(Cause-Effect Graphing)"
  },
  {
    "question": "여러 버전의 프로그램에 동일한 테스트 자료를 제공하여  테스트하는 기법은?",
    "answer": "비교(Comparison) 테스트"
  },
  {
    "question": " : ① join : () ② project : () ③ select : () ④ division : ()",
    "answer": "㉢ ⋈ , ㉡ π ,㉠ σ , ㉣ ÷"
  },
  {
    "question": "- 보안 용어, 지속적인 공격, 침투, 검색, 수집 및 유출의 4단계",
    "answer": "APT"
  },
  {
    "question": "- insert into 사원(사원번호, 이름, 연령, 급여, 부서번호) ( ① ) (10, 'Jain', 20, 1000, 1);\n- insert into 사원 ( ② ) 사원번호, 이름, 연령, 급여, 부서번호 from 신입사원 where 부서번호 = 1;\n- delete ( ③ ) 사원 where 사원번호 = 10;\n- update 사원 ( ④ ) 급여 = 2000 where 이름 = 'Tom'\n",
    "answer": "① values  ② select  ③ from  ④ set"
  },
  {
    "question": "- 키(Key)\n  ① 다른 테이블 릴레이션의 기본키를 참조\n  ② 유일성과 최소성 만족\n  ③ 기본키룰를 제외한 나머지 후보키\n  ④ 유일성만 만족, 최소성 만족 못함",
    "answer": "① ㉡ 외래키  ② ㉣ 후보키  ③ ㉢ 대체키  ④ ㉠ 슈퍼키"
  },
  {
    "question": "오류(Error) 가 발생할 경우 자동으로 송신 측에 데이터를 재전송 요청하는것은 ?",
    "answer": "ARQ(Automatic Repeat reQuest)"
  },
  {
    "question": "송신측이 전송한 프레임에 대하여 수신측으로 부터 응답신호(ACK,NAK)를 받을때 까지 기다리는 방식은?",
    "answer": "Stop and Wait ARQ"
  },
  {
    "question": "한 번에 여러 프레임을 보낸후, 응답신호를 기다리고, 신호를 받으면 후속 데이터를 전송하는 방식은 ?",
    "answer": "Go Back N ARQ"
  },
  {
    "question": "",
    "image": "/QuizPeek/quiz/img/img_42.png",
    "answer": "① 정보\n② 감독\n③ 비번호\n④ 비동기 균형 모드\n⑤ 비동기 응답 모드"
  },
  {
    "question": "",
    "image": "/QuizPeek/quiz/img/img_43.png",
    "answer": "① Hamming\n② FEC\n③ BEC\n④ Parity\n⑤ CRC"
  },
  {
    "question": "① 다른 모듈 내부에 있는 변수나 기능을 다른 모듈에서 사용하는 경우\n\n② 모듈 간의 인터페이스로 배열이나 오브젝트(Object), 자료구조(Structure) 등이 전달되는 경우\n\n③ 파라미터가 아닌 모듈 밖에서 선언되어 있는 전역 변수를 참조하고 전역 변수를 갱신하는 식으로 상호 작용하는 경우\n\nㄱ. 자료 결합도\t\tㄴ. 스탬프 결합도\t\tㄷ. 제어 결합도        \n\nㄹ. 공통 결합도\t\tㅁ. 내용 결합도\t\tㅂ. 외부 결합도",
    "answer": " ① ㅁ ② ㄴ ③ ㄹ"
  },
  {
    "question": "다음 설명에 대해 괄호 안에 알맞는 용어를 작성하시오. (영어 약자로 작성하시오.)\n\n \n\n \n\n(     )은/는 자료를 일정한 크기로 정하여 순서대로 전송하는 자료의 전송 방식이다.\n \n\n셀이라 부르는 고정 길이 패킷을 이용하여 처리가 단순하고 고속망에 적합하며, 연속적으로 셀을 보낼 때 \n다중화를 하지 않고 셀단위로 동기가 이루어지지만 경우에 따라 동기식 시간 분할 다중화를 사용하기도 한다.\n \n\n가상 채널 (Virtual Channel) 기반의 연결 지향 서비스로 셀이라 부르는 고정 길이(53바이트) 패킷을 사용하며 통계적 다중화 방식을 이용한다.",
    "answer": "ATM"
  }
]
